package thread.demo05.InnerClassThread;

/**
 * 匿名内部类的方式实现多线程
 * 
 * 匿名：没有名字
 * 内部类：写在其他类内部的类
 * 
 * 匿名内部类作用：简化代码
 * 		把子类继承父类，重写父类方法，创建子类对象合成一步完成。
 * 		把实现类实现接口，重写接口方法，创建实现类对象合成一步完成。
 * -> 匿名内部类的最终产物：子类/实现类对象，而这个类没有名字
 * 
 * 
 * 格式：
 * 		new 父类/接口(){
 * 			重写父类/接口中的方法	
 * 		}
 * 
 * @author yuanhai
 *
 */
public class Demo05InnerClassThread {
	
	public static void main(String[] args) {
		//  线程的父类是Thread
		new Thread() {
			// 重写run()方法，设置线程任务
			@Override
			public void run() {
				for(int i=0;i<20;i++) {
					System.out.println(Thread.currentThread().getName()+"--->"+"渊海");
				}
			}
		}.start();;
		
		//	线程实现Runnable接口的方式
		// Runnable r = new RunnableImpl();       // 多态
		Runnable r = new Runnable() {
			// 重写run()方法，设置线程任务
			public void run() {
				for(int i=0;i<20;i++) {
					System.out.println(Thread.currentThread().getName()+"--->"+"竹春");
				}
			}
		};
		new Thread(r).start();
		
		// 简化接口的方式：
		new Thread(new Runnable() {
			// 重写run()方法，设置线程任务
			public void run() {
				for(int i=0;i<20;i++) {
					System.out.println(Thread.currentThread().getName()+"--->"+"浮沉");
				}
			}
		}).start();
		
	}
	
		
		

}
